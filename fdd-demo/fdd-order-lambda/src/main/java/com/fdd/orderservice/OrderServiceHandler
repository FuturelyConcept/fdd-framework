package com.fdd.orderservice;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fdd.demo.domain.*;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.HashMap;
import java.util.Map;

public class OrderServiceHandler implements RequestHandler<Object, Object> {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final HttpClient httpClient = HttpClient.newHttpClient();

    private final String userServiceUrl = System.getenv("USER_SERVICE_URL");
    private final String inventoryServiceUrl = System.getenv("INVENTORY_SERVICE_URL");

    @Override
    public Object handleRequest(Object input, Context context) {
        try {
            context.getLogger().log("Order Service - Raw input: " + input);
            context.getLogger().log("Order Service - User URL: " + userServiceUrl);
            context.getLogger().log("Order Service - Inventory URL: " + inventoryServiceUrl);

            CreateOrderRequest orderRequest = null;
            boolean isHttpRequest = false;

            // Handle different input types
            if (input instanceof Map) {
                Map<String, Object> inputMap = (Map<String, Object>) input;

                if (inputMap.containsKey("body")) {
                    context.getLogger().log("Order Service - Processing HTTP event");
                    isHttpRequest = true;
                    String body = (String) inputMap.get("body");
                    orderRequest = objectMapper.readValue(body, CreateOrderRequest.class);
                } else {
                    context.getLogger().log("Order Service - Processing direct JSON");
                    orderRequest = objectMapper.convertValue(inputMap, CreateOrderRequest.class);
                }
            } else {
                JsonNode jsonNode = objectMapper.readTree(input.toString());
                orderRequest = objectMapper.convertValue(jsonNode, CreateOrderRequest.class);
            }

            if (orderRequest == null) {
                return createErrorResponse("Could not parse order request", isHttpRequest);
            }

            // STEP 1: Call User Service Lambda via HTTP
            ValidationResult userValidation = callUserService(orderRequest.getUserData(), context);
            if (!userValidation.isValid()) {
                OrderResult result = OrderResult.failed("User validation failed: " + userValidation.getMessage());
                return isHttpRequest ? createHttpResponse(400, result) : result;
            }

            // STEP 2: Call Inventory Service Lambda via HTTP
            InventoryCheckRequest inventoryRequest = new InventoryCheckRequest(
                orderRequest.getProductId(), orderRequest.getQuantity());
            InventoryResult inventoryResult = callInventoryService(inventoryRequest, context);
            if (!inventoryResult.isAvailable()) {
                OrderResult result = OrderResult.failed("Inventory check failed: " + inventoryResult.getMessage());
                return isHttpRequest ? createHttpResponse(400, result) : result;
            }

            // STEP 3: Create order
            String orderId = "multi-lambda-order-" + System.currentTimeMillis();

            context.getLogger().log("Order Service - Success: " + orderId);
            OrderResult result = OrderResult.success(orderId);

            return isHttpRequest ? createHttpResponse(200, result) : result;

        } catch (Exception e) {
            context.getLogger().log("Order Service - Error: " + e.getMessage());
            e.printStackTrace();

            OrderResult errorResult = OrderResult.failed("Order processing error: " + e.getMessage());
            boolean isHttpRequest = input instanceof Map && ((Map<String, Object>) input).containsKey("body");

            if (isHttpRequest) {
                return createHttpResponse(500, errorResult);
            } else {
                return errorResult;
            }
        }
    }

    private ValidationResult callUserService(UserData userData, Context context) {
        try {
            String requestBody = objectMapper.writeValueAsString(userData);
            context.getLogger().log("Calling User Service with: " + requestBody);

            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(userServiceUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            context.getLogger().log("User Service response: " + response.statusCode() + " - " + response.body());

            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), ValidationResult.class);
            } else {
                return ValidationResult.invalid("User service call failed: " + response.statusCode());
            }

        } catch (Exception e) {
            context.getLogger().log("Error calling user service: " + e.getMessage());
            return ValidationResult.invalid("User service error: " + e.getMessage());
        }
    }

    private InventoryResult callInventoryService(InventoryCheckRequest request, Context context) {
        try {
            String requestBody = objectMapper.writeValueAsString(request);
            context.getLogger().log("Calling Inventory Service with: " + requestBody);

            HttpRequest httpRequest = HttpRequest.newBuilder()
                .uri(URI.create(inventoryServiceUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

            HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
            context.getLogger().log("Inventory Service response: " + response.statusCode() + " - " + response.body());

            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), InventoryResult.class);
            } else {
                return InventoryResult.unavailable("Inventory service call failed: " + response.statusCode());
            }

        } catch (Exception e) {
            context.getLogger().log("Error calling inventory service: " + e.getMessage());
            return InventoryResult.unavailable("Inventory service error: " + e.getMessage());
        }
    }

    private Object createHttpResponse(int statusCode, Object body) {
        Map<String, Object> response = new HashMap<>();
        response.put("statusCode", statusCode);

        Map<String, String> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");
        headers.put("Access-Control-Allow-Origin", "*");
        response.put("headers", headers);

        try {
            response.put("body", objectMapper.writeValueAsString(body));
        } catch (Exception e) {
            response.put("body", "{\"error\":\"Failed to serialize response\"}");
        }

        return response;
    }

    private Object createErrorResponse(String message, boolean isHttpRequest) {
        OrderResult errorResult = OrderResult.failed(message);

        if (isHttpRequest) {
            return createHttpResponse(400, errorResult);
        } else {
            return errorResult;
        }
    }
}