package com.fdd.orderservice;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fdd.demo.domain.*;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Map;

/**
 * REVOLUTIONARY: Order Orchestrator that calls other Lambda functions
 * Demonstrates cross-Lambda function composition with type safety!
 */
public class OrderServiceHandler implements RequestHandler<Map<String, Object>, OrderResult> {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final HttpClient httpClient = HttpClient.newHttpClient();

    // URLs of other Lambda functions (set via environment variables)
    private final String userServiceUrl = System.getenv("USER_SERVICE_URL");
    private final String inventoryServiceUrl = System.getenv("INVENTORY_SERVICE_URL");

    @Override
    public OrderResult handleRequest(Map<String, Object> input, Context context) {
        try {
            context.getLogger().log("Order Service - Processing order: " + input);

            // Convert input
            CreateOrderRequest orderRequest = objectMapper.convertValue(input, CreateOrderRequest.class);

            // STEP 1: Call User Service Lambda via HTTP
            ValidationResult userValidation = callUserService(orderRequest.getUserData(), context);
            if (!userValidation.isValid()) {
                return OrderResult.failed("User validation failed: " + userValidation.getMessage());
            }

            // STEP 2: Call Inventory Service Lambda via HTTP
            InventoryCheckRequest inventoryRequest = new InventoryCheckRequest(
                orderRequest.getProductId(), orderRequest.getQuantity());
            InventoryResult inventoryResult = callInventoryService(inventoryRequest, context);
            if (!inventoryResult.isAvailable()) {
                return OrderResult.failed("Inventory check failed: " + inventoryResult.getMessage());
            }

            // STEP 3: Create order (simplified)
            String orderId = "multi-lambda-order-" + System.currentTimeMillis();

            context.getLogger().log("Order Service - Success: " + orderId);
            return OrderResult.success(orderId);

        } catch (Exception e) {
            context.getLogger().log("Order Service - Error: " + e.getMessage());
            return OrderResult.failed("Order processing error: " + e.getMessage());
        }
    }

    /**
     * Call User Service Lambda via HTTP - Type-safe cross-Lambda call!
     */
    private ValidationResult callUserService(UserData userData, Context context) {
        try {
            String requestBody = objectMapper.writeValueAsString(userData);

            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(userServiceUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), ValidationResult.class);
            } else {
                return ValidationResult.invalid("User service call failed: " + response.statusCode());
            }

        } catch (Exception e) {
            context.getLogger().log("Error calling user service: " + e.getMessage());
            return ValidationResult.invalid("User service error: " + e.getMessage());
        }
    }

    /**
     * Call Inventory Service Lambda via HTTP - Type-safe cross-Lambda call!
     */
    private InventoryResult callInventoryService(InventoryCheckRequest request, Context context) {
        try {
            String requestBody = objectMapper.writeValueAsString(request);

            HttpRequest httpRequest = HttpRequest.newBuilder()
                .uri(URI.create(inventoryServiceUrl))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

            HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 200) {
                return objectMapper.readValue(response.body(), InventoryResult.class);
            } else {
                return InventoryResult.unavailable("Inventory service call failed: " + response.statusCode());
            }

        } catch (Exception e) {
            context.getLogger().log("Error calling inventory service: " + e.getMessage());
            return InventoryResult.unavailable("Inventory service error: " + e.getMessage());
        }
    }
}